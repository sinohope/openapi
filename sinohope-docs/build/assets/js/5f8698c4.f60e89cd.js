"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[3664],{79518:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>b,frontMatter:()=>p,metadata:()=>h,toc:()=>y});var a=n(87462),i=(n(67294),n(3905)),s=n(26389),r=n(94891),o=(n(75190),n(47507)),l=n(24310),d=n(63303),c=(n(75035),n(85162));const p={id:"collateral-v-1-settlement-tx-build",title:"/collateral/v1/settlement/tx/build",description:"Build an unsigned transaction acording the settlementId and assetId (the transfer amount will be filled by the user confirmed settlement details)",sidebar_label:"/collateral/v1/settlement/tx/build",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Exchange->Custody"],description:"Build an unsigned transaction acording the settlementId and assetId (the transfer amount will be filled by the user confirmed settlement details)",security:[{ApiKeyAuth:[],ApiNonce:[],ApiSig:[]}],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",properties:{settlementId:{type:"string",description:"Unique identifier for a settlement batch"},assetId:{type:"string",description:"Sinohope-defined currency identifier"},replacedTxId:{type:"string",nullable:!0,description:"If this field is not empty, it means that we need to build a new transaction (usually with a higher transaction fee) to replace the existing specified transaction."}},required:["settlementId","assetId"]}}}},responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean",description:"Status of the transaction build, False/True (failed/success)"},tx:{type:"object",description:"Not null if the status is true",properties:{transactionId:{type:"string",description:"A unique identifier of this transaction( not a transaction hash)"},network:{type:"string",description:"the network of this transaction"},txType:{type:"string",description:"Transaction type. Different block chains have different logics, and there may be different transaction types/formats within a same block chain."},hashToBeSigned:{type:"string",description:"Unsigned transaction hash. Note that this is not the final transaction hash."},data:{type:"object",description:"Unsigned transaction detail data, which needs to determine the data fields based on network, and txType. If it's an UTXO transaction, then the data should be a map , which key is a `vinId` that identifies the TransactionInput and the value is the TransactionInput.",properties:{asset:{type:"string",description:"asset type in the transaction details"},decimal:{type:"number",description:"asset decimal needed in the transaction details"},currentTime:{type:"number",description:"unix timestamp in milliseconds"},expireTime:{type:"number",description:"expire timestamp in milliseconds"},expireBlockHeight:{type:"number",description:"expire block height"},referBlockHeight:{type:"number",description:"expire block height"},from:{type:"string",description:"from address"},fromTag:{type:"string",description:"from tag"},to:{type:"string",description:"to address"},toTag:{type:"string",description:"to tag"},amount:{type:"string",description:"the transfer amount"},fee:{type:"string",description:null},feeAsset:{type:"string",description:null},feePrice:{type:"string",description:null},feeStep:{type:"string",description:null},chainId:{type:"string",description:null},nonce:{type:"number",description:null},vin:{type:"object",description:"the input of an UTXO transaction. It's a map which key is a `vinId` and vaule is an object.",additionalProperties:{type:"object",properties:{hash:{type:"string",description:"the hash of the input transaction"},voutIndex:{type:"number",description:"index of the input transaction"},address:{type:"string",description:null},amount:{type:"string",description:null},asset:{type:"string",description:null}}}},vout:{type:"array",description:"the output of an UTXO transaction.",items:{type:"object",properties:{asset:{type:"string",description:null},address:{type:"string",description:null},amount:{type:"string",description:null}}}},funName:{type:"string",description:"contract type, e.g. `erc20`, `erc721`, `erc1155`"},params:{type:"array",description:"the parameters array of a contract call.",items:{type:"object",properties:{value:{type:"string",description:"the parameter value"},type:{type:"string",description:"the type of the parameter value"}}}}}}},required:["transactionId","network","txType","hashToBeSigned","data"]},fromAccount:{type:"object",description:'The information about the "from" account of the current transaction. Not null if the status is true.',properties:{userId:{type:"string",description:"A data needed for initiating an mpc signing"},cmrkPK:{type:"string",description:"The public key to identifies an mpc key share"},path:{type:"string",description:'The path to derive the "from" account.'},cryptography:{type:"string",description:'Either "ecdsa-secp256k1" or "eddsa-ed25519", determined by the network',example:"ecdsa-secp256k1"}},required:["userId","cmrkPK","path","cryptography"]},failedReason:{type:"string",nullable:!0,description:"The failed reason if the status is False"}},required:["status"]}}}}},method:"post",path:"/collateral/v1/settlement/tx/build",securitySchemes:{ApiKeyAuth:{type:"apiKey",in:"header",name:"BIZ-API-KEY",description:"This API key is given to you by Sinohope when onboarding your exchange."},ApiNonce:{type:"apiKey",in:"header",name:"BIZ-API-NONCE",description:"A nonce value (timestamp) that is included in the data to be signed."},ApiSig:{type:"apiKey",in:"header",name:"BIZ-API-SIGNATURE",description:"signature of the request information(nonce,path,body) using the secret_key which is provided by Sinohope when onboarding your exchange."}},jsonRequestBodyExample:{settlementId:"string",assetId:"string",replacedTxId:"string"},info:{title:"OpenLoop API",version:"0.9.12",description:'\n\n# Response code definition\n\nCommonly, for all APIs, the HTTP status codes should use those registered by IANA.\nSee: <https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml>\n\nIn OpenLoop, we should use a few well defined HTTP status codes as follow:\n\n- `200`: Successful response. Refer to each API for the detailed response data.\n- `400`: Return Bad Request.\n- `401`: Unauthorized. Either API details are missing or invalid\n- `403`: Forbidden - You do not have access to the requested resource.\n- `415`: Unsupported media type. You need to use application/json.\n- `500`: Exchange/SinoHope internal error.\n\n# Changelog\n\nChanges log, dates are displayed in UTC, shows in a reverse order.\n\n* v0.9.12\n> 2023/06/28 by Darlzan\n\n- `/collateral/v1/settlement/tx/build` : update the response.\n\n* v0.9.11\n> 2023/06/16 by Darlzan\n\n- E-custody `/internal/v1/mpc/start` : add fields `transactionId`.\n\n* v0.9.10\n> 2023/06/14 by Darlzan\n\n- `/collateral/v1/settlement/address` : new added api.\n- `/collateral/v1/settlement/finish` : new added api.\n\n* v0.9.9\n> 2023/06/06 by Darlzan\n\n- `/collateral/v1/settlement/tx/build` : add fields `cryptography` in the response.\n- `/collateral/v1/settlement/tx/broadcast` : update single fields `signature` to object type fields `signatures`, in order to adapt to the UTXO transactions.\n\n* v0.9.8\n> 2023/06/01 by Darlzan\n\n- `/exchange/v1/mpc/pubkey` :contains two public keys, ecdsa-secp256k1 public key and eddsa-ed25519 public key.\n- `/exchange/v1/settlement/confirm` : add fields `approved`.\n\n* v0.9.7\n> 2023/05/30 by Darlzan\n\n- `/exchange/v1/deposit` : new added.\n- `/collateral/v1/deposit/balance` : new added.\n- `/exchange/v1/withdrawable`: change the type of the fields `amount` in response data from `number` to `string`.\n\n* v0.9.6\n> 2023/05/30 by Darlzan\n\n- `/exchange/v1/settlement/network` : change fields name `perferedNetwork` to `settlementNetwork`\n\n* v0.9.5\n> 2023/05/26 by Darlzan\n\n- `/exchange/v1/mpc/join` and `/internal/v1/mpc/join`: add fields `roomId`, `partyId`, `partyIds`.\n- `/exchange/v1/settlement/list` and `/collateral/v1/settlement`: fix typo, `assetid` -> `assetId`.\n- add some examples, fix some descriptions.\n\n* v0.9.4\n> 2023/05/18 by Darlzan\n\n- `/exchange/v1/settlement/network`: The settlement network should be specified for a currency, so change the field `assetId` to `currency`.\n- Added new apis in the Exchange: `/exchange/v1/transaction/status` and `/exchange/v1/withdrawable`.\n- `/collateral/v1/settlement/tx/build` : add feild `replacedTxId`.\n- `/internal/v1/mpc/signature/result` and `/collateral/v1/settlement/tx/broadcast`: modify the fields about signature.\n- modify the description of `/collateral/v1/transactions`.\n\n* v0.9.3\n> 2023/05/12 by Darlzan\n\n- `/exchange/v1/address` : add request feild `settlementNetwork`.\n- `/collateral/v1/settlement/tx/build` : remove feilds `network`, `address` in request, they should be determined by the settlement details.\n- add security section for all "Exchange->Custody" apis.\n\n* v0.9.2\n> 2023/05/04 by Darlzan\n\n- add apis related to mpc business\n\n* v0.9.1\n> 2023/03/24 by Kevin\n\nSecond working version.\n* v0.9.0\n> 2023/03/12 by Kevin\n\nFirst version'},postman:{name:"/collateral/v1/settlement/tx/build",description:{content:"Build an unsigned transaction acording the settlementId and assetId (the transfer amount will be filled by the user confirmed settlement details)",type:"text/plain"},url:{path:["collateral","v1","settlement","tx","build"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}},auth:{type:"apikey",apikey:[{type:"any",value:"BIZ-API-KEY",key:"key"},{type:"any",value:"<API Key>",key:"value"},{type:"any",value:"header",key:"in"}]}}},sidebar_class_name:"post api-method",info_path:"docs/develop/openloop-api/openloop-api",custom_edit_url:null},m=void 0,h={unversionedId:"develop/openloop-api/collateral-v-1-settlement-tx-build",id:"develop/openloop-api/collateral-v-1-settlement-tx-build",title:"/collateral/v1/settlement/tx/build",description:"Build an unsigned transaction acording the settlementId and assetId (the transfer amount will be filled by the user confirmed settlement details)",source:"@site/docs/develop/openloop-api/collateral-v-1-settlement-tx-build.api.mdx",sourceDirName:"develop/openloop-api",slug:"/develop/openloop-api/collateral-v-1-settlement-tx-build",permalink:"/docs/develop/openloop-api/collateral-v-1-settlement-tx-build",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"collateral-v-1-settlement-tx-build",title:"/collateral/v1/settlement/tx/build",description:"Build an unsigned transaction acording the settlementId and assetId (the transfer amount will be filled by the user confirmed settlement details)",sidebar_label:"/collateral/v1/settlement/tx/build",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Exchange->Custody"],description:"Build an unsigned transaction acording the settlementId and assetId (the transfer amount will be filled by the user confirmed settlement details)",security:[{ApiKeyAuth:[],ApiNonce:[],ApiSig:[]}],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",properties:{settlementId:{type:"string",description:"Unique identifier for a settlement batch"},assetId:{type:"string",description:"Sinohope-defined currency identifier"},replacedTxId:{type:"string",nullable:!0,description:"If this field is not empty, it means that we need to build a new transaction (usually with a higher transaction fee) to replace the existing specified transaction."}},required:["settlementId","assetId"]}}}},responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean",description:"Status of the transaction build, False/True (failed/success)"},tx:{type:"object",description:"Not null if the status is true",properties:{transactionId:{type:"string",description:"A unique identifier of this transaction( not a transaction hash)"},network:{type:"string",description:"the network of this transaction"},txType:{type:"string",description:"Transaction type. Different block chains have different logics, and there may be different transaction types/formats within a same block chain."},hashToBeSigned:{type:"string",description:"Unsigned transaction hash. Note that this is not the final transaction hash."},data:{type:"object",description:"Unsigned transaction detail data, which needs to determine the data fields based on network, and txType. If it's an UTXO transaction, then the data should be a map , which key is a `vinId` that identifies the TransactionInput and the value is the TransactionInput.",properties:{asset:{type:"string",description:"asset type in the transaction details"},decimal:{type:"number",description:"asset decimal needed in the transaction details"},currentTime:{type:"number",description:"unix timestamp in milliseconds"},expireTime:{type:"number",description:"expire timestamp in milliseconds"},expireBlockHeight:{type:"number",description:"expire block height"},referBlockHeight:{type:"number",description:"expire block height"},from:{type:"string",description:"from address"},fromTag:{type:"string",description:"from tag"},to:{type:"string",description:"to address"},toTag:{type:"string",description:"to tag"},amount:{type:"string",description:"the transfer amount"},fee:{type:"string",description:null},feeAsset:{type:"string",description:null},feePrice:{type:"string",description:null},feeStep:{type:"string",description:null},chainId:{type:"string",description:null},nonce:{type:"number",description:null},vin:{type:"object",description:"the input of an UTXO transaction. It's a map which key is a `vinId` and vaule is an object.",additionalProperties:{type:"object",properties:{hash:{type:"string",description:"the hash of the input transaction"},voutIndex:{type:"number",description:"index of the input transaction"},address:{type:"string",description:null},amount:{type:"string",description:null},asset:{type:"string",description:null}}}},vout:{type:"array",description:"the output of an UTXO transaction.",items:{type:"object",properties:{asset:{type:"string",description:null},address:{type:"string",description:null},amount:{type:"string",description:null}}}},funName:{type:"string",description:"contract type, e.g. `erc20`, `erc721`, `erc1155`"},params:{type:"array",description:"the parameters array of a contract call.",items:{type:"object",properties:{value:{type:"string",description:"the parameter value"},type:{type:"string",description:"the type of the parameter value"}}}}}}},required:["transactionId","network","txType","hashToBeSigned","data"]},fromAccount:{type:"object",description:'The information about the "from" account of the current transaction. Not null if the status is true.',properties:{userId:{type:"string",description:"A data needed for initiating an mpc signing"},cmrkPK:{type:"string",description:"The public key to identifies an mpc key share"},path:{type:"string",description:'The path to derive the "from" account.'},cryptography:{type:"string",description:'Either "ecdsa-secp256k1" or "eddsa-ed25519", determined by the network',example:"ecdsa-secp256k1"}},required:["userId","cmrkPK","path","cryptography"]},failedReason:{type:"string",nullable:!0,description:"The failed reason if the status is False"}},required:["status"]}}}}},method:"post",path:"/collateral/v1/settlement/tx/build",securitySchemes:{ApiKeyAuth:{type:"apiKey",in:"header",name:"BIZ-API-KEY",description:"This API key is given to you by Sinohope when onboarding your exchange."},ApiNonce:{type:"apiKey",in:"header",name:"BIZ-API-NONCE",description:"A nonce value (timestamp) that is included in the data to be signed."},ApiSig:{type:"apiKey",in:"header",name:"BIZ-API-SIGNATURE",description:"signature of the request information(nonce,path,body) using the secret_key which is provided by Sinohope when onboarding your exchange."}},jsonRequestBodyExample:{settlementId:"string",assetId:"string",replacedTxId:"string"},info:{title:"OpenLoop API",version:"0.9.12",description:'\n\n# Response code definition\n\nCommonly, for all APIs, the HTTP status codes should use those registered by IANA.\nSee: <https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml>\n\nIn OpenLoop, we should use a few well defined HTTP status codes as follow:\n\n- `200`: Successful response. Refer to each API for the detailed response data.\n- `400`: Return Bad Request.\n- `401`: Unauthorized. Either API details are missing or invalid\n- `403`: Forbidden - You do not have access to the requested resource.\n- `415`: Unsupported media type. You need to use application/json.\n- `500`: Exchange/SinoHope internal error.\n\n# Changelog\n\nChanges log, dates are displayed in UTC, shows in a reverse order.\n\n* v0.9.12\n> 2023/06/28 by Darlzan\n\n- `/collateral/v1/settlement/tx/build` : update the response.\n\n* v0.9.11\n> 2023/06/16 by Darlzan\n\n- E-custody `/internal/v1/mpc/start` : add fields `transactionId`.\n\n* v0.9.10\n> 2023/06/14 by Darlzan\n\n- `/collateral/v1/settlement/address` : new added api.\n- `/collateral/v1/settlement/finish` : new added api.\n\n* v0.9.9\n> 2023/06/06 by Darlzan\n\n- `/collateral/v1/settlement/tx/build` : add fields `cryptography` in the response.\n- `/collateral/v1/settlement/tx/broadcast` : update single fields `signature` to object type fields `signatures`, in order to adapt to the UTXO transactions.\n\n* v0.9.8\n> 2023/06/01 by Darlzan\n\n- `/exchange/v1/mpc/pubkey` :contains two public keys, ecdsa-secp256k1 public key and eddsa-ed25519 public key.\n- `/exchange/v1/settlement/confirm` : add fields `approved`.\n\n* v0.9.7\n> 2023/05/30 by Darlzan\n\n- `/exchange/v1/deposit` : new added.\n- `/collateral/v1/deposit/balance` : new added.\n- `/exchange/v1/withdrawable`: change the type of the fields `amount` in response data from `number` to `string`.\n\n* v0.9.6\n> 2023/05/30 by Darlzan\n\n- `/exchange/v1/settlement/network` : change fields name `perferedNetwork` to `settlementNetwork`\n\n* v0.9.5\n> 2023/05/26 by Darlzan\n\n- `/exchange/v1/mpc/join` and `/internal/v1/mpc/join`: add fields `roomId`, `partyId`, `partyIds`.\n- `/exchange/v1/settlement/list` and `/collateral/v1/settlement`: fix typo, `assetid` -> `assetId`.\n- add some examples, fix some descriptions.\n\n* v0.9.4\n> 2023/05/18 by Darlzan\n\n- `/exchange/v1/settlement/network`: The settlement network should be specified for a currency, so change the field `assetId` to `currency`.\n- Added new apis in the Exchange: `/exchange/v1/transaction/status` and `/exchange/v1/withdrawable`.\n- `/collateral/v1/settlement/tx/build` : add feild `replacedTxId`.\n- `/internal/v1/mpc/signature/result` and `/collateral/v1/settlement/tx/broadcast`: modify the fields about signature.\n- modify the description of `/collateral/v1/transactions`.\n\n* v0.9.3\n> 2023/05/12 by Darlzan\n\n- `/exchange/v1/address` : add request feild `settlementNetwork`.\n- `/collateral/v1/settlement/tx/build` : remove feilds `network`, `address` in request, they should be determined by the settlement details.\n- add security section for all "Exchange->Custody" apis.\n\n* v0.9.2\n> 2023/05/04 by Darlzan\n\n- add apis related to mpc business\n\n* v0.9.1\n> 2023/03/24 by Kevin\n\nSecond working version.\n* v0.9.0\n> 2023/03/12 by Kevin\n\nFirst version'},postman:{name:"/collateral/v1/settlement/tx/build",description:{content:"Build an unsigned transaction acording the settlementId and assetId (the transfer amount will be filled by the user confirmed settlement details)",type:"text/plain"},url:{path:["collateral","v1","settlement","tx","build"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}},auth:{type:"apikey",apikey:[{type:"any",value:"BIZ-API-KEY",key:"key"},{type:"any",value:"<API Key>",key:"value"},{type:"any",value:"header",key:"in"}]}}},sidebar_class_name:"post api-method",info_path:"docs/develop/openloop-api/openloop-api",custom_edit_url:null},sidebar:"openLoopApiSidebar",previous:{title:"/collateral/v1/settlement/finish",permalink:"/docs/develop/openloop-api/collateral-v-1-settlement-finish"},next:{title:"/collateral/v1/settlement/tx/broadcast",permalink:"/docs/develop/openloop-api/collateral-v-1-settlement-tx-broadcast"}},u={},y=[{value:"/collateral/v1/settlement/tx/build",id:"collateralv1settlementtxbuild",level:2}],g={toc:y},f="wrapper";function b(e){let{components:t,...n}=e;return(0,i.kt)(f,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"collateralv1settlementtxbuild"},"/collateral/v1/settlement/tx/build"),(0,i.kt)("p",null,"Build an unsigned transaction acording the settlementId and assetId (the transfer amount will be filled by the user confirmed settlement details)"),(0,i.kt)(r.Z,{mdxType:"MimeTabs"},(0,i.kt)(c.Z,{label:"application/json",value:"application/json-schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Request Body"),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," required")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"settlementId",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"Unique identifier for a settlement batch"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"assetId",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"Sinohope-defined currency identifier"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"replacedTxId",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",nullable:!0,description:"If this field is not empty, it means that we need to build a new transaction (usually with a higher transaction fee) to replace the existing specified transaction."},mdxType:"SchemaItem"}))))),(0,i.kt)("div",null,(0,i.kt)(s.Z,{mdxType:"ApiTabs"},(0,i.kt)(c.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"Successful response")),(0,i.kt)("div",null,(0,i.kt)(r.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(c.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,i.kt)(d.Z,{mdxType:"SchemaTabs"},(0,i.kt)(c.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Schema")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"status",required:!0,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean",description:"Status of the transaction build, False/True (failed/success)"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"tx"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Not null if the status is true")),(0,i.kt)(l.Z,{collapsible:!1,name:"transactionId",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"A unique identifier of this transaction( not a transaction hash)"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"network",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"the network of this transaction"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"txType",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"Transaction type. Different block chains have different logics, and there may be different transaction types/formats within a same block chain."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hashToBeSigned",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"Unsigned transaction hash. Note that this is not the final transaction hash."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"data"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," required")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Unsigned transaction detail data, which needs to determine the data fields based on network, and txType. If it's an UTXO transaction, then the data should be a map , which key is a ",(0,i.kt)("inlineCode",{parentName:"p"},"vinId")," that identifies the TransactionInput and the value is the TransactionInput.")),(0,i.kt)(l.Z,{collapsible:!1,name:"asset",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"asset type in the transaction details"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"decimal",required:!1,schemaName:"number",qualifierMessage:void 0,schema:{type:"number",description:"asset decimal needed in the transaction details"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"currentTime",required:!1,schemaName:"number",qualifierMessage:void 0,schema:{type:"number",description:"unix timestamp in milliseconds"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"expireTime",required:!1,schemaName:"number",qualifierMessage:void 0,schema:{type:"number",description:"expire timestamp in milliseconds"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"expireBlockHeight",required:!1,schemaName:"number",qualifierMessage:void 0,schema:{type:"number",description:"expire block height"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"referBlockHeight",required:!1,schemaName:"number",qualifierMessage:void 0,schema:{type:"number",description:"expire block height"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"from",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"from address"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"fromTag",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"from tag"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"to",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"to address"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"toTag",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"to tag"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"amount",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"the transfer amount"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"fee",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:null},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"feeAsset",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:null},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"feePrice",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:null},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"feeStep",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:null},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"chainId",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:null},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"nonce",required:!1,schemaName:"number",qualifierMessage:void 0,schema:{type:"number",description:null},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"vin"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"the input of an UTXO transaction. It's a map which key is a ",(0,i.kt)("inlineCode",{parentName:"p"},"vinId")," and vaule is an object.")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"property name*"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"the hash of the input transaction"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"voutIndex",required:!1,schemaName:"number",qualifierMessage:void 0,schema:{type:"number",description:"index of the input transaction"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"address",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:null},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"amount",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:null},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"asset",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:null},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"vout"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"the output of an UTXO transaction.")),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!1,name:"asset",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:null},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"address",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:null},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"amount",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:null},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))),(0,i.kt)(l.Z,{collapsible:!1,name:"funName",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"contract type, e.g. `erc20`, `erc721`, `erc1155`"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"params"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"the parameters array of a contract call.")),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!1,name:"value",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"the parameter value"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"type",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"the type of the parameter value"},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))))))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"fromAccount"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,'The information about the "from" account of the current transaction. Not null if the status is true.')),(0,i.kt)(l.Z,{collapsible:!1,name:"userId",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"A data needed for initiating an mpc signing"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"cmrkPK",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The public key to identifies an mpc key share"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"path",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:'The path to derive the "from" account.'},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"cryptography",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:'Either "ecdsa-secp256k1" or "eddsa-ed25519", determined by the network',example:"ecdsa-secp256k1"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"failedReason",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",nullable:!0,description:"The failed reason if the status is False"},mdxType:"SchemaItem"})))),(0,i.kt)(c.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,i.kt)(o.Z,{responseExample:'{\n  "status": true,\n  "tx": {\n    "transactionId": "string",\n    "network": "string",\n    "txType": "string",\n    "hashToBeSigned": "string",\n    "data": {\n      "asset": "string",\n      "decimal": 0,\n      "currentTime": 0,\n      "expireTime": 0,\n      "expireBlockHeight": 0,\n      "referBlockHeight": 0,\n      "from": "string",\n      "fromTag": "string",\n      "to": "string",\n      "toTag": "string",\n      "amount": "string",\n      "fee": "string",\n      "feeAsset": "string",\n      "feePrice": "string",\n      "feeStep": "string",\n      "chainId": "string",\n      "nonce": 0,\n      "vin": {},\n      "vout": [\n        {\n          "asset": "string",\n          "address": "string",\n          "amount": "string"\n        }\n      ],\n      "funName": "string",\n      "params": [\n        {\n          "value": "string",\n          "type": "string"\n        }\n      ]\n    }\n  },\n  "fromAccount": {\n    "userId": "string",\n    "cmrkPK": "string",\n    "path": "string",\n    "cryptography": "ecdsa-secp256k1"\n  },\n  "failedReason": "string"\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}b.isMDXComponent=!0}}]);